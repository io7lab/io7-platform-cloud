[
    {
        "id": "24db40535e2f1336",
        "type": "tab",
        "label": "Shadow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d8fd34e3306fa741",
        "type": "group",
        "z": "24db40535e2f1336",
        "name": "Event Shdowing",
        "style": {
            "label": true,
            "fill": "#ffefbf",
            "stroke": "#ffbfbf",
            "color": "#3f3f3f"
        },
        "nodes": [
            "0db4e79b55cfa7e0",
            "93b1bb0425f2d229",
            "078988a60a59732b",
            "0569a8dbd301de67",
            "688654cd9a5f7b54"
        ],
        "x": 54,
        "y": 159,
        "w": 512,
        "h": 202
    },
    {
        "id": "3d943447ec445ff0",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "0db4e79b55cfa7e0",
        "type": "inject",
        "z": "24db40535e2f1336",
        "g": "d8fd34e3306fa741",
        "name": "at boot",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 200,
        "wires": [
            [
                "93b1bb0425f2d229"
            ]
        ]
    },
    {
        "id": "93b1bb0425f2d229",
        "type": "function",
        "z": "24db40535e2f1336",
        "g": "d8fd34e3306fa741",
        "name": "function 1",
        "func": "const redis = global.get('redis');\nconst client = redis.createClient({ url: 'redis://redis:6379' });\nclient.jget = async k => {\n    return {\n        d:\n            JSON.parse(await client.get(k)),\n        time: await client.get(k + ':time')\n    };\n}\n\nclient.connect();\nglobal.set('redisClient', client);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "078988a60a59732b",
        "type": "function",
        "z": "24db40535e2f1336",
        "g": "d8fd34e3306fa741",
        "name": "function 2",
        "func": "var splits = msg.topic.split('/');\nvar obj = splits[1];\nvar connMsg = splits[3] === 'connection';\nif (obj === 'bridge' || connMsg) return null;\nconst client = global.get('redisClient');\n\nif (typeof msg.payload === 'string') {\n    msg.payload = JSON.parse(msg.payload);\n}\n\nif ('d' in msg.payload) {\n    msg.payload = msg.payload.d;\n}\n\nmsg.payload = JSON.stringify(msg.payload);\n\nclient.set(obj, msg.payload);\nclient.set(obj + ':time', (new Date()).toISOString());\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "0569a8dbd301de67",
        "type": "mqtt in",
        "z": "24db40535e2f1336",
        "g": "d8fd34e3306fa741",
        "name": "",
        "topic": "iot3/+/evt/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "3d943447ec445ff0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 320,
        "wires": [
            [
                "078988a60a59732b"
            ]
        ]
    },
    {
        "id": "688654cd9a5f7b54",
        "type": "comment",
        "z": "24db40535e2f1336",
        "g": "d8fd34e3306fa741",
        "name": "io7 app id needs to be configured.",
        "info": "io7 AppId (mqtt user / pw) should created and \nentered to this mqtt node",
        "x": 220,
        "y": 280,
        "wires": []
    }
]